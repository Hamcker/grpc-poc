// source: data-generator.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.contract.ActualData1', null, global);
goog.exportSymbol('proto.contract.ActualData2', null, global);
goog.exportSymbol('proto.contract.ActualData3', null, global);
goog.exportSymbol('proto.contract.ActualData4', null, global);
goog.exportSymbol('proto.contract.GenerateDataRequest', null, global);
goog.exportSymbol('proto.contract.GenerateDataResponse1', null, global);
goog.exportSymbol('proto.contract.GenerateDataResponse2', null, global);
goog.exportSymbol('proto.contract.GenerateDataResponse3', null, global);
goog.exportSymbol('proto.contract.GenerateDataResponse4', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.GenerateDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.GenerateDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contract.GenerateDataRequest.displayName = 'proto.contract.GenerateDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.GenerateDataResponse1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contract.GenerateDataResponse1.repeatedFields_, null);
};
goog.inherits(proto.contract.GenerateDataResponse1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contract.GenerateDataResponse1.displayName = 'proto.contract.GenerateDataResponse1';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ActualData1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ActualData1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contract.ActualData1.displayName = 'proto.contract.ActualData1';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.GenerateDataResponse2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contract.GenerateDataResponse2.repeatedFields_, null);
};
goog.inherits(proto.contract.GenerateDataResponse2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contract.GenerateDataResponse2.displayName = 'proto.contract.GenerateDataResponse2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ActualData2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ActualData2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contract.ActualData2.displayName = 'proto.contract.ActualData2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.GenerateDataResponse3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contract.GenerateDataResponse3.repeatedFields_, null);
};
goog.inherits(proto.contract.GenerateDataResponse3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contract.GenerateDataResponse3.displayName = 'proto.contract.GenerateDataResponse3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ActualData3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ActualData3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contract.ActualData3.displayName = 'proto.contract.ActualData3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.GenerateDataResponse4 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contract.GenerateDataResponse4.repeatedFields_, null);
};
goog.inherits(proto.contract.GenerateDataResponse4, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contract.GenerateDataResponse4.displayName = 'proto.contract.GenerateDataResponse4';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ActualData4 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contract.ActualData4.repeatedFields_, null);
};
goog.inherits(proto.contract.ActualData4, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contract.ActualData4.displayName = 'proto.contract.ActualData4';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.GenerateDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.GenerateDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.GenerateDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.GenerateDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requiredcount: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.GenerateDataRequest}
 */
proto.contract.GenerateDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.GenerateDataRequest;
  return proto.contract.GenerateDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.GenerateDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.GenerateDataRequest}
 */
proto.contract.GenerateDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequiredcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.GenerateDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contract.GenerateDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contract.GenerateDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.GenerateDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequiredcount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 requiredCount = 1;
 * @return {number}
 */
proto.contract.GenerateDataRequest.prototype.getRequiredcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contract.GenerateDataRequest} returns this
 */
proto.contract.GenerateDataRequest.prototype.setRequiredcount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contract.GenerateDataResponse1.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.GenerateDataResponse1.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.GenerateDataResponse1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.GenerateDataResponse1} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.GenerateDataResponse1.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalrows: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestampsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    timetogeneraterows: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.contract.ActualData1.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.GenerateDataResponse1}
 */
proto.contract.GenerateDataResponse1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.GenerateDataResponse1;
  return proto.contract.GenerateDataResponse1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.GenerateDataResponse1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.GenerateDataResponse1}
 */
proto.contract.GenerateDataResponse1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalrows(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTimestamps(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimetogeneraterows(value);
      break;
    case 4:
      var value = new proto.contract.ActualData1;
      reader.readMessage(value,proto.contract.ActualData1.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.GenerateDataResponse1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contract.GenerateDataResponse1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contract.GenerateDataResponse1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.GenerateDataResponse1.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalrows();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTimetogeneraterows();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.contract.ActualData1.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 TotalRows = 1;
 * @return {number}
 */
proto.contract.GenerateDataResponse1.prototype.getTotalrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contract.GenerateDataResponse1} returns this
 */
proto.contract.GenerateDataResponse1.prototype.setTotalrows = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string Timestamps = 2;
 * @return {!Array<string>}
 */
proto.contract.GenerateDataResponse1.prototype.getTimestampsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contract.GenerateDataResponse1} returns this
 */
proto.contract.GenerateDataResponse1.prototype.setTimestampsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contract.GenerateDataResponse1} returns this
 */
proto.contract.GenerateDataResponse1.prototype.addTimestamps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contract.GenerateDataResponse1} returns this
 */
proto.contract.GenerateDataResponse1.prototype.clearTimestampsList = function() {
  return this.setTimestampsList([]);
};


/**
 * optional int64 TimeToGenerateRows = 3;
 * @return {number}
 */
proto.contract.GenerateDataResponse1.prototype.getTimetogeneraterows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contract.GenerateDataResponse1} returns this
 */
proto.contract.GenerateDataResponse1.prototype.setTimetogeneraterows = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated ActualData1 Data = 4;
 * @return {!Array<!proto.contract.ActualData1>}
 */
proto.contract.GenerateDataResponse1.prototype.getDataList = function() {
  return /** @type{!Array<!proto.contract.ActualData1>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contract.ActualData1, 4));
};


/**
 * @param {!Array<!proto.contract.ActualData1>} value
 * @return {!proto.contract.GenerateDataResponse1} returns this
*/
proto.contract.GenerateDataResponse1.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.contract.ActualData1=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contract.ActualData1}
 */
proto.contract.GenerateDataResponse1.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.contract.ActualData1, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contract.GenerateDataResponse1} returns this
 */
proto.contract.GenerateDataResponse1.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ActualData1.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ActualData1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ActualData1} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.ActualData1.toObject = function(includeInstance, msg) {
  var f, obj = {
    field1: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ActualData1}
 */
proto.contract.ActualData1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ActualData1;
  return proto.contract.ActualData1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ActualData1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ActualData1}
 */
proto.contract.ActualData1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ActualData1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contract.ActualData1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contract.ActualData1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.ActualData1.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Field1 = 1;
 * @return {string}
 */
proto.contract.ActualData1.prototype.getField1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contract.ActualData1} returns this
 */
proto.contract.ActualData1.prototype.setField1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contract.GenerateDataResponse2.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.GenerateDataResponse2.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.GenerateDataResponse2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.GenerateDataResponse2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.GenerateDataResponse2.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalrows: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestampsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    timetogeneraterows: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.contract.ActualData2.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.GenerateDataResponse2}
 */
proto.contract.GenerateDataResponse2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.GenerateDataResponse2;
  return proto.contract.GenerateDataResponse2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.GenerateDataResponse2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.GenerateDataResponse2}
 */
proto.contract.GenerateDataResponse2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalrows(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTimestamps(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimetogeneraterows(value);
      break;
    case 4:
      var value = new proto.contract.ActualData2;
      reader.readMessage(value,proto.contract.ActualData2.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.GenerateDataResponse2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contract.GenerateDataResponse2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contract.GenerateDataResponse2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.GenerateDataResponse2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalrows();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTimetogeneraterows();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.contract.ActualData2.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 TotalRows = 1;
 * @return {number}
 */
proto.contract.GenerateDataResponse2.prototype.getTotalrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contract.GenerateDataResponse2} returns this
 */
proto.contract.GenerateDataResponse2.prototype.setTotalrows = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string Timestamps = 2;
 * @return {!Array<string>}
 */
proto.contract.GenerateDataResponse2.prototype.getTimestampsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contract.GenerateDataResponse2} returns this
 */
proto.contract.GenerateDataResponse2.prototype.setTimestampsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contract.GenerateDataResponse2} returns this
 */
proto.contract.GenerateDataResponse2.prototype.addTimestamps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contract.GenerateDataResponse2} returns this
 */
proto.contract.GenerateDataResponse2.prototype.clearTimestampsList = function() {
  return this.setTimestampsList([]);
};


/**
 * optional int64 TimeToGenerateRows = 3;
 * @return {number}
 */
proto.contract.GenerateDataResponse2.prototype.getTimetogeneraterows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contract.GenerateDataResponse2} returns this
 */
proto.contract.GenerateDataResponse2.prototype.setTimetogeneraterows = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated ActualData2 Data = 4;
 * @return {!Array<!proto.contract.ActualData2>}
 */
proto.contract.GenerateDataResponse2.prototype.getDataList = function() {
  return /** @type{!Array<!proto.contract.ActualData2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contract.ActualData2, 4));
};


/**
 * @param {!Array<!proto.contract.ActualData2>} value
 * @return {!proto.contract.GenerateDataResponse2} returns this
*/
proto.contract.GenerateDataResponse2.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.contract.ActualData2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contract.ActualData2}
 */
proto.contract.GenerateDataResponse2.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.contract.ActualData2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contract.GenerateDataResponse2} returns this
 */
proto.contract.GenerateDataResponse2.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ActualData2.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ActualData2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ActualData2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.ActualData2.toObject = function(includeInstance, msg) {
  var f, obj = {
    field21: jspb.Message.getFieldWithDefault(msg, 1, ""),
    field22: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ActualData2}
 */
proto.contract.ActualData2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ActualData2;
  return proto.contract.ActualData2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ActualData2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ActualData2}
 */
proto.contract.ActualData2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField21(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField22(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ActualData2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contract.ActualData2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contract.ActualData2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.ActualData2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField21();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getField22();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string Field21 = 1;
 * @return {string}
 */
proto.contract.ActualData2.prototype.getField21 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contract.ActualData2} returns this
 */
proto.contract.ActualData2.prototype.setField21 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 Field22 = 2;
 * @return {number}
 */
proto.contract.ActualData2.prototype.getField22 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contract.ActualData2} returns this
 */
proto.contract.ActualData2.prototype.setField22 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contract.GenerateDataResponse3.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.GenerateDataResponse3.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.GenerateDataResponse3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.GenerateDataResponse3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.GenerateDataResponse3.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalrows: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestampsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    timetogeneraterows: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.contract.ActualData3.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.GenerateDataResponse3}
 */
proto.contract.GenerateDataResponse3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.GenerateDataResponse3;
  return proto.contract.GenerateDataResponse3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.GenerateDataResponse3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.GenerateDataResponse3}
 */
proto.contract.GenerateDataResponse3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalrows(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTimestamps(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimetogeneraterows(value);
      break;
    case 4:
      var value = new proto.contract.ActualData3;
      reader.readMessage(value,proto.contract.ActualData3.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.GenerateDataResponse3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contract.GenerateDataResponse3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contract.GenerateDataResponse3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.GenerateDataResponse3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalrows();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTimetogeneraterows();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.contract.ActualData3.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 TotalRows = 1;
 * @return {number}
 */
proto.contract.GenerateDataResponse3.prototype.getTotalrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contract.GenerateDataResponse3} returns this
 */
proto.contract.GenerateDataResponse3.prototype.setTotalrows = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string Timestamps = 2;
 * @return {!Array<string>}
 */
proto.contract.GenerateDataResponse3.prototype.getTimestampsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contract.GenerateDataResponse3} returns this
 */
proto.contract.GenerateDataResponse3.prototype.setTimestampsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contract.GenerateDataResponse3} returns this
 */
proto.contract.GenerateDataResponse3.prototype.addTimestamps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contract.GenerateDataResponse3} returns this
 */
proto.contract.GenerateDataResponse3.prototype.clearTimestampsList = function() {
  return this.setTimestampsList([]);
};


/**
 * optional int64 TimeToGenerateRows = 3;
 * @return {number}
 */
proto.contract.GenerateDataResponse3.prototype.getTimetogeneraterows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contract.GenerateDataResponse3} returns this
 */
proto.contract.GenerateDataResponse3.prototype.setTimetogeneraterows = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated ActualData3 Data = 4;
 * @return {!Array<!proto.contract.ActualData3>}
 */
proto.contract.GenerateDataResponse3.prototype.getDataList = function() {
  return /** @type{!Array<!proto.contract.ActualData3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contract.ActualData3, 4));
};


/**
 * @param {!Array<!proto.contract.ActualData3>} value
 * @return {!proto.contract.GenerateDataResponse3} returns this
*/
proto.contract.GenerateDataResponse3.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.contract.ActualData3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contract.ActualData3}
 */
proto.contract.GenerateDataResponse3.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.contract.ActualData3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contract.GenerateDataResponse3} returns this
 */
proto.contract.GenerateDataResponse3.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ActualData3.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ActualData3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ActualData3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.ActualData3.toObject = function(includeInstance, msg) {
  var f, obj = {
    field31: jspb.Message.getFieldWithDefault(msg, 1, ""),
    field32: jspb.Message.getFieldWithDefault(msg, 2, 0),
    field33: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ActualData3}
 */
proto.contract.ActualData3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ActualData3;
  return proto.contract.ActualData3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ActualData3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ActualData3}
 */
proto.contract.ActualData3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField31(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField32(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField33(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ActualData3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contract.ActualData3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contract.ActualData3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.ActualData3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField31();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getField32();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getField33();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string Field31 = 1;
 * @return {string}
 */
proto.contract.ActualData3.prototype.getField31 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contract.ActualData3} returns this
 */
proto.contract.ActualData3.prototype.setField31 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 Field32 = 2;
 * @return {number}
 */
proto.contract.ActualData3.prototype.getField32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contract.ActualData3} returns this
 */
proto.contract.ActualData3.prototype.setField32 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool Field33 = 3;
 * @return {boolean}
 */
proto.contract.ActualData3.prototype.getField33 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contract.ActualData3} returns this
 */
proto.contract.ActualData3.prototype.setField33 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contract.GenerateDataResponse4.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.GenerateDataResponse4.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.GenerateDataResponse4.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.GenerateDataResponse4} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.GenerateDataResponse4.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalrows: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestampsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    timetogeneraterows: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.contract.ActualData4.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.GenerateDataResponse4}
 */
proto.contract.GenerateDataResponse4.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.GenerateDataResponse4;
  return proto.contract.GenerateDataResponse4.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.GenerateDataResponse4} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.GenerateDataResponse4}
 */
proto.contract.GenerateDataResponse4.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalrows(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTimestamps(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimetogeneraterows(value);
      break;
    case 4:
      var value = new proto.contract.ActualData4;
      reader.readMessage(value,proto.contract.ActualData4.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.GenerateDataResponse4.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contract.GenerateDataResponse4.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contract.GenerateDataResponse4} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.GenerateDataResponse4.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalrows();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTimetogeneraterows();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.contract.ActualData4.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 TotalRows = 1;
 * @return {number}
 */
proto.contract.GenerateDataResponse4.prototype.getTotalrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contract.GenerateDataResponse4} returns this
 */
proto.contract.GenerateDataResponse4.prototype.setTotalrows = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string Timestamps = 2;
 * @return {!Array<string>}
 */
proto.contract.GenerateDataResponse4.prototype.getTimestampsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contract.GenerateDataResponse4} returns this
 */
proto.contract.GenerateDataResponse4.prototype.setTimestampsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contract.GenerateDataResponse4} returns this
 */
proto.contract.GenerateDataResponse4.prototype.addTimestamps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contract.GenerateDataResponse4} returns this
 */
proto.contract.GenerateDataResponse4.prototype.clearTimestampsList = function() {
  return this.setTimestampsList([]);
};


/**
 * optional int64 TimeToGenerateRows = 3;
 * @return {number}
 */
proto.contract.GenerateDataResponse4.prototype.getTimetogeneraterows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contract.GenerateDataResponse4} returns this
 */
proto.contract.GenerateDataResponse4.prototype.setTimetogeneraterows = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated ActualData4 Data = 4;
 * @return {!Array<!proto.contract.ActualData4>}
 */
proto.contract.GenerateDataResponse4.prototype.getDataList = function() {
  return /** @type{!Array<!proto.contract.ActualData4>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contract.ActualData4, 4));
};


/**
 * @param {!Array<!proto.contract.ActualData4>} value
 * @return {!proto.contract.GenerateDataResponse4} returns this
*/
proto.contract.GenerateDataResponse4.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.contract.ActualData4=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contract.ActualData4}
 */
proto.contract.GenerateDataResponse4.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.contract.ActualData4, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contract.GenerateDataResponse4} returns this
 */
proto.contract.GenerateDataResponse4.prototype.clearDataList = function() {
  return this.setDataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contract.ActualData4.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ActualData4.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ActualData4.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ActualData4} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.ActualData4.toObject = function(includeInstance, msg) {
  var f, obj = {
    field1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    field2: jspb.Message.getFieldWithDefault(msg, 2, 0),
    field3: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    field4List: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ActualData4}
 */
proto.contract.ActualData4.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ActualData4;
  return proto.contract.ActualData4.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ActualData4} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ActualData4}
 */
proto.contract.ActualData4.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField2(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField3(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addField4(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ActualData4.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contract.ActualData4.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contract.ActualData4} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contract.ActualData4.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getField2();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getField3();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getField4List();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string Field1 = 1;
 * @return {string}
 */
proto.contract.ActualData4.prototype.getField1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contract.ActualData4} returns this
 */
proto.contract.ActualData4.prototype.setField1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 Field2 = 2;
 * @return {number}
 */
proto.contract.ActualData4.prototype.getField2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contract.ActualData4} returns this
 */
proto.contract.ActualData4.prototype.setField2 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool Field3 = 3;
 * @return {boolean}
 */
proto.contract.ActualData4.prototype.getField3 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contract.ActualData4} returns this
 */
proto.contract.ActualData4.prototype.setField3 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated string Field4 = 4;
 * @return {!Array<string>}
 */
proto.contract.ActualData4.prototype.getField4List = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contract.ActualData4} returns this
 */
proto.contract.ActualData4.prototype.setField4List = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contract.ActualData4} returns this
 */
proto.contract.ActualData4.prototype.addField4 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contract.ActualData4} returns this
 */
proto.contract.ActualData4.prototype.clearField4List = function() {
  return this.setField4List([]);
};


goog.object.extend(exports, proto.contract);
